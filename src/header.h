#include <SPI.h>
#include <LoRa.h>
#include <ArduinoJson.h>
#include <string> // ? Remover ?
#include "driver/adc.h"
#include "esp_adc_cal.h"
#include "driver/pcnt.h" // Driver para Contagem de Pulsos
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
// include <cstring>  // Para a função strlen //Verificar necessidade
#include <stdio.h>
#include "freertos/portmacro.h"
#include "freertos/queue.h"
#include "driver/periph_ctrl.h"
#include "driver/gpio.h"
#include "esp_attr.h"
#include "esp_log.h"
#include <esp_log.h> // ? Remover ?
#include "soc/gpio_sig_map.h"
#include "flags.h"
#include "AESMessage.h"
#include <Update.h>
#include <HTTPClient.h>
#include <EEPROM.h>

#include "nvs_flash.h"
#include "nvs.h"

#include <math.h>
#include <WiFiManager.h> // https://github.com/tzapu/WiFiManager

#define TRIGGER_PIN 13 // Função reset

#define GPIO_BOTAO 4
#define TEMPO_DEBOUNCE 1000 // ms
//#define TEMPO_POS 10000     // Tempo para permitir novo acionamento
bool blocked = 0;           // variavel bloqueio clique após incremento

double ltrsAnterior = 0.0; // TEMPORARIOOOO


#include "esp_task_wdt.h"

// #include "Temperature.h"

/***ESP 32 station***/
#define ss 18
#define rst 14
#define dio0 26

/****/
int value;
int previousvalue;

#define RED 0
#define SILVER 1
int currentstate = SILVER;

unsigned long nbRead = 0;

#define HIGH_THRESHOLD 60
#define LOW_THRESHOLD 30
/****/

/**
 * @brief ota
 *
 */

long contentLength = 0;
bool isValidContentType = false;
String servidorOTA = "http://att.s2d.inf.br/firmware.bin"; // www.sistemas.s2d.inf.br/firmwareMPC100.bin
int portaOTA = 80;                                         // NÃO funciona com HTTPS   //será alterado automaticamente pela EEPROM
// String arquivoOTA = "";  // será alterado automaticamente pela EEPROM
//  Atualizações:
int newVersion = 0; // Variavel contendo a versão atual apartir de uma atualização
int timerOta = 0;
double EPVersion = VERSION;  // Versão atual dispositivo
const int bufferSize = 1024; // Tamanho do buffer em bytes (pode ajustar conforme necessário)
uint8_t buffer[bufferSize];  // Declaração do buffer como um array de bytes

// /**
//  * TEST CODE BRIEF
//  *
//  * Use PCNT module to count pulses generated by a flowmeter hall sensor..
//  *
//  * The signal is connected to GPIO4,
//  *
//  * Load example, open a serial port to view the message printed on your screen.
//  *
//  * An interrupt will be triggered when the counter value:
//  *   - reaches 'thresh1' or 'thresh0' value,
//  *   - reaches 'l_lim' value or 'h_lim' value,
//  *   - will be reset to zero.
//  */
// #define PCNT_TEST_UNIT      PCNT_UNIT_0
// #define PCNT_H_LIM_VAL      1000
// #define PCNT_THRESH1_VAL    500
// #define PCNT_THRESH0_VAL   -500
// #define PCNT_INPUT_SIG_IO   4  // Pulse Input GPIO

// Tamanho padrão do id (id + fim da string)
#define ST_ID_LEN 9

// Tamanho Padrão valor persistente dos litros
#define VAL_LT_LEN 9

// Contador Absoluto Max: 4.294.967.295 // 8 Casas será necessário (Incremental) Valor deverá ser gravado na eeprom
volatile double ltrs = 0;

// Variaveis controle de tempo entre gravações na eeprom
int stampTimeWriten = 0;
int timeWriten = 15000;

// Fator de Multiplicação Litros = Pulsos * pulseValue
double pulseValue = 1;

bool DEBUG;

const char *TAG = "MAIN";
